#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <queue>
using namespace std;
typedef long long ll;
inline int read()
{
	int res = 0;
	char c;
	bool flag = false;
	c = getchar();
	while(!isdigit(c))
	{
		flag = (c == '-');
		c = getchar();
	}
	while(isdigit(c))
	{
		res = res * 10 + (c ^ 48);
		c = getchar();
	}
	return !flag ? res : -res;
}
const int Max_n = 2e7 + 5;
const int Max_m = 1e5 + 5;
int siz[Max_n] , son[Max_n][2] , n , k , a[Max_m] , root , tot;
struct node
{
	int x , kth , val;
	node(int a , int b , int c)
	{
		x = a , kth = b , val = c;
	}
	node() {}
	bool operator < (const node &a)const
	{
		return val > a.val;
	}
};
priority_queue<node> q;
void insert(int val , int dig , int &now)
{
	if(!now)	now = ++ tot;
	++ siz[now];
	if(dig == 0)	return;
	if(val & (1 << (dig - 1)))
		insert(val , dig - 1 , son[now][1]);
	else insert(val , dig - 1 , son[now][0]);
}
int find(int val , int num , int now , int dep , int ret)
{
	if(dep == 0)	return ret;
	if(val & (1 << (dep - 1)))
	{
		if(siz[son[now][1]] >= num)
			return find(val , num , son[now][1] , dep - 1 , ret | (1 << (dep - 1)));
		else return find(val , num - siz[son[now][1]] , son[now][0] , dep - 1 , ret);
	}
	else
	{
		if(siz[son[now][0]] >= num)
			return find(val , num , son[now][0] , dep - 1 , ret);
		else return find(val , num - siz[son[now][0]] , son[now][1] , dep - 1 , ret | (1 << (dep - 1)));
	}
}
ll ans;
int main()
{
	// freopen("data.in" , "r" , stdin);
	n = read() , k = read();
	for(int i = 1 ; i <= n ; ++ i)
	{
		a[i] = read();
		insert(a[i] , 32 , root);
	}
	for(int i = 1 ; i <= n ; ++ i)
	{
		int ret = find(a[i] , 2 , root , 32 , 0);
		q.push(node(a[i] , 2 , ret ^ a[i]));
	}
	for(int i = 1 ; i <= 2 * k ; ++ i)
	{
		node now = q.top();
		q.pop();
		if(i % 2)
			printf("%d " , now.val);
		int ret_now;
		if(now.kth < n)
		{
			ret_now = find(now.x , now.kth + 1 , root , 32 , 0);
			q.push(node(now.x , now.kth + 1 , ret_now ^ now.x));
		}
	}
	return 0;
}
