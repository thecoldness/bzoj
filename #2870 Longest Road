#include <cstdio>
#include <cstring>
#include <cctype>
#include <algorithm>
#include <vector>
using namespace std;

namespace thecold
{
	typedef long long ll;

	inline int read()
	{
		int res = 0; bool flag = false;
		char c = getchar();
		while(!isdigit(c))
			flag = (c == '-') , c = getchar();
		while(isdigit(c))
			res = res * 10 + (c ^ 48) , c = getchar();
		return !flag ? res : -res;
	}

	const int Max_n = 5e4 + 5;
	const int INF = 1e9;
	const int Max_m = 7e4 + 5;

	struct node
	{
		int nex , to , val;
		node(int a , int b , int c)
		{
			nex = a , to = b , val = c;
		}
		node(){}
	}edge[Max_n << 2];

	int val[Max_n << 1] , tot = 1 , n , head[Max_n << 1];
	int root , cnt;

	vector<int> v[Max_n];

	ll ans;

	inline void add_edge(const int x , const int y , const int z)
	{
		// printf("%d %d %d\n" , x , y , z);
		edge[ ++ tot] = node(head[x] , y , z) , head[x] = tot;
		edge[ ++ tot] = node(head[y] , x , z) , head[y] = tot;
	}

	void rebuild(const int now , const int from)
	{
		int sz = v[now].size() , lst = 0;
		for(int i = 0 ; i < sz ; ++ i)
		{
			int nex = v[now][i]; if(nex == from) continue;
			if(!lst) lst = now , add_edge(now , nex , 1);
			else
			{
				++ cnt;// , val[cnt] = INF; bug
				val[cnt] = val[now];
				add_edge(cnt , lst , 0) , add_edge(nex , cnt , 1);
				lst = cnt;
			}
			rebuild(nex , now);
		}
	}

	bool vis[Max_n << 2];

	int siz[Max_n << 1] , mx[Max_n << 2];

	inline void dfs_siz(const int now , const int from)
	{
		siz[now] = 1;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(vis[i] || nex == from) continue;
			dfs_siz(nex , now) , siz[now] += siz[nex];
		}
	}

	void dfs_root(const int now , const int from , const int all)
	{
		siz[now] = 1;
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(vis[i] || nex == from) continue;
			dfs_root(nex , now , all) , siz[now] += siz[nex];
			mx[i] = max(siz[nex] , all - siz[nex]);
			if(mx[i] < mx[root]) root = i;
		}
	}

	int len[2][Max_m] , st[2][Max_m] , tp[2];

	bool reach[2][Max_m];

	inline void MAX(int &x , const int y)
	{
		if(y > x) x = y;
	}

	void dfs_dis(const int now , const int from , const int type , const int lenth , const int va)
	{
		if(va <= 65536)
		{
			if(!reach[type][va]) reach[type][va] = true , st[type][ ++ tp[type]] = va;
			MAX(len[type][va] , lenth);
		}
		for(int i = head[now] ; i ; i = edge[i].nex)
		{
			int nex = edge[i].to; if(vis[i] || nex == from) continue;
			dfs_dis(nex , now , type , edge[i].val + lenth , min(va , val[nex]));
		}
	}

	int al[Max_m] , ar[Max_m];

	void solve(const int now , const int all)
	{
		// if(all == 1) return;// bug
		root = 0; dfs_root(now , 0 , all); vis[root] = vis[root ^ 1] = true;
		if(!root) return;
		dfs_dis(edge[root].to , 0 , 0 , 0 , val[edge[root].to]);
		dfs_dis(edge[root ^ 1].to , 0 , 1 , 0 , val[edge[root ^ 1].to]);
		sort(st[0] + 1 , st[0] + tp[0] + 1) , sort(st[1] + 1 , st[1] + tp[1] + 1);
		for(int i = 1 ; i <= tp[0] ; ++ i) al[i] = len[0][st[0][i]];
		for(int i = 1 ; i <= tp[1] ; ++ i) ar[i] = len[1][st[1][i]];
		int tr = tp[1] + 1 , max_len = -INF;
		for(int i = tp[0] ; i ; -- i)
		{
			while(tr > 1 && st[1][tr - 1] >= st[0][i]) -- tr , MAX(max_len , ar[tr]);
			ans = max(ans , 1ll * st[0][i] * (al[i] + max_len + edge[root].val + 1));
		}
		max_len = -INF , tr = tp[0] + 1;
		for(int i = tp[1] ; i ; -- i)
		{
			while(tr > 1 && st[0][tr - 1] >= st[1][i]) -- tr , MAX(max_len , al[tr]);
			ans = max(ans , 1ll * st[1][i] * (ar[i] + max_len + edge[root].val + 1));
		}
		while(tp[0]) reach[0][st[0][tp[0]]] = false , len[0][st[0][tp[0]]] = 0 , -- tp[0];
		while(tp[1]) reach[1][st[1][tp[1]]] = false , len[1][st[1][tp[1]]] = 0 , -- tp[1];
		int nowroot = root;// bug
		dfs_siz(edge[root].to , 0) , solve(edge[root].to , siz[edge[root].to]);
		dfs_siz(edge[nowroot ^ 1].to , 0) , solve(edge[nowroot ^ 1].to , siz[edge[nowroot ^ 1].to]);
	}

	inline void main()
	{
		cnt = n = read() , mx[root] = INF;
		for(int i = 1 ; i <= n ; ++ i) val[i] = read();
		for(int i = 1 ; i < n ; ++ i)
		{
			int ui = read() , vi = read();
			v[ui].push_back(vi) , v[vi].push_back(ui);
		}
		rebuild(1 , 0); 
		// solve(1 , n); bug
		solve(1 , cnt);
		printf("%lld\n" , ans);
	}
}

int main()
{
	// freopen("data.in" , "r" , stdin);
	thecold::main();
	return 0;
}
/*
4
2 5 4 2 
1 2
1 3
2 4
ans = 8
3
5 5 3 
1 2
2 3
ans = 10
4
1 3 3 4 
1 2
1 3
1 4
ans = 3
*/
